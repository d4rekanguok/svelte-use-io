[{"title":"Install","html":"<pre><code class=\"hljs language-sh\">npm i svelte-use-io\n<span class=\"hljs-comment\"># or yarn add svelte-use-io</span>\n<span class=\"hljs-comment\"># or pnpm i svelte-use-io</span>\n</code></pre>"},{"title":"Quick usage","html":"<p>Passing directly to html elements:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">import</span> { onDestroy } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte'</span>;\n\t<span class=\"hljs-keyword\">import</span> { create_observer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte-use-io'</span>;\n\t<span class=\"hljs-keyword\">const</span> { observer, io } = <span class=\"hljs-title hljs-function\">create_observer</span>();\n\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title hljs-function\">doStuff</span> = (<span class=\"hljs-params\">{ detail }</span>) => <span class=\"hljs-variable hljs-language\">console</span>.<span class=\"hljs-title hljs-function\">log</span>({ detail });\n\t<span class=\"hljs-comment\">// { detail: IntersectionObserverEntry }</span>\n\n\t<span class=\"hljs-title hljs-function\">onDestroy</span>(<span class=\"hljs-function\">() =></span> {\n\t\tio.<span class=\"hljs-title hljs-function\">disconnect</span>();\n\t})\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n\t{#each Array.from({ length: 6 }, (_, i) => i + 1) as i (i)}\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">use:observer</span> <span class=\"hljs-attr\">on:intersecting</span>=<span class=\"hljs-string\">\"{doStuff}\"</span>></span>Item {i}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n\t{/each}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n</code></pre>\n<p>Passing to components:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!-- In outer components --></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n\t{#each content as { _id, ...data } (_id)}\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span> {<span class=\"hljs-attr\">observer</span>} {<span class=\"hljs-attr\">data</span>}></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n\t{/each}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n\n<span class=\"hljs-comment\">&#x3C;!-- In Section.svelte --></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">use:observer</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n</code></pre>\n<p>Listening only once:</p>\n<pre><code class=\"hljs language-html\">\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">use:observer</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">once:</span> <span class=\"hljs-attr\">true</span> }}></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\t<span class=\"hljs-comment\">&#x3C;!-- or --></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">use:observer</span> <span class=\"hljs-attr\">data-io-once</span>=<span class=\"hljs-string\">\"true\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>"},{"title":"Configure","html":"<h3># create_observer</h3>\n<p><code>create_observer</code> accepts IO options, plus a callback on <em>a single entry</em>, and a visual toggle to show the root element's rootBound (give it a try! It's on the top menu bar of this page.)</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title hljs-class\">Options</span> {\n    root?: <span class=\"hljs-title hljs-class\">Element</span> | <span class=\"hljs-title hljs-class\">Document</span> | <span class=\"hljs-literal\">null</span>;\n    rootMargin?: <span class=\"hljs-built_in\">string</span>;\n    threshold?: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">number</span>[];\n\tcallback?: <span class=\"hljs-function\">(<span class=\"hljs-params\">{\n        entry: IntersectionObserverEntry\n        observer: IntersectionObserver\n    }</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n\tshowRootBound?: <span class=\"hljs-built_in\">boolean</span>;\n}\n</code></pre>\n<blockquote>\n<p>⚠️ If you pass in a custom <code>callback</code>, you'll have to create your own custom events.\nTo retain the default behavior, import <code>default_callback</code> &#x26; wrap around it:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { default_callback } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte-use-io'</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title hljs-function\">custom_callback</span> = (<span class=\"hljs-params\">{ entry, observer }</span>) => {\n  <span class=\"hljs-title hljs-function\">doStuff</span>(entry);\n  <span class=\"hljs-title hljs-function\">default_callback</span>({ entry, observer }); <span class=\"hljs-comment\">// send `on:intersecting`, `on:unintersecting`</span>\n}\n</code></pre>\n</blockquote>\n<h3># observer</h3>\n<p>This code</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">use:observer</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">once:</span> <span class=\"hljs-attr\">true</span> }}></span>\n</code></pre>\n<p>...will observe the <code>div</code> only once. Note that if <code>once</code> is <code>false</code> <em>and then</em> set to <code>true</code>, <code>div</code> will be observed once again, <em>once</em>.</p>\n<h3># Clean up</h3>\n<p>You'd need to clean up instance of IO on component destroy:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { onDestroy } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte'</span>\n<span class=\"hljs-keyword\">import</span> { create_observer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte-use-io'</span>\n\n<span class=\"hljs-keyword\">const</span> { observer, io } = <span class=\"hljs-title hljs-function\">create_observer</span>({\n    <span class=\"hljs-attr\">rootMargin</span>: <span class=\"hljs-string\">`-49% 0px`</span>\n})\n\n<span class=\"hljs-title hljs-function\">onDestroy</span>(<span class=\"hljs-function\">() =></span> {\n    io.<span class=\"hljs-title hljs-function\">disconnect</span>()\n})\n\n</code></pre>\n<p><code>create_observer</code> can be used dynamically, but need work to clean up:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">let</span> margin;\n\t<span class=\"hljs-keyword\">let</span> observer;\n\t<span class=\"hljs-keyword\">let</span> io;\n\n\t<span class=\"hljs-attr\">$</span>: marginY = browser &#x26;&#x26; (innerHeight - <span class=\"hljs-number\">2</span>) / <span class=\"hljs-number\">2</span>;\n\t<span class=\"hljs-attr\">$</span>: {\n        <span class=\"hljs-keyword\">if</span> (io) {\n            io.<span class=\"hljs-title hljs-function\">disconnect</span>();\n        };\n        \n        <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-title hljs-function\">create_observer</span>({\n            <span class=\"hljs-attr\">rootMargin</span>: <span class=\"hljs-string\">`-{marginY}px 0px`</span>\n        });\n\n        io = res.<span class=\"hljs-property\">io</span>\n        observer = res.<span class=\"hljs-property\">observer</span>\n\t}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>"},{"title":"Why","html":"<p>Admittedly, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">the Intersection Observer API ('IO' from here on)</a> is not difficult to use — but it is verbose and I have to look it up every time. This is <a href=\"https://svelte.dev/docs#template-syntax-element-directives-use-action\">a Svelte action</a> that I've been copying from project to project &#x26; thought it's time to slab a few tests on it &#x26; publish as a package.</p>\n<p>I think the IO API is a lot easier to handle as events on elements vs. the callback API:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> { create_observer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte-use-io'</span>\n    <span class=\"hljs-keyword\">const</span> { observer } = <span class=\"hljs-title hljs-function\">create_observer</span>()\n    <span class=\"hljs-keyword\">let</span> intersecting = <span class=\"hljs-literal\">false</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n    <span class=\"hljs-attr\">use:observer</span>\n    <span class=\"hljs-attr\">on:intersecting</span>=<span class=\"hljs-string\">{()</span> =></span> (intersecting = true)}\n    on:unintersecting={() => (intersecting = false)}\n>\n  <span class=\"hljs-comment\">&#x3C;!-- ... --></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<p>I'm also tempted to create a <code>&#x3C;Observer></code> component that may look something like this:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// ⚠️ This component doesn't exists</span>\n&#x3C;<span class=\"hljs-title hljs-class\">Observer</span> <span class=\"hljs-attr\">bind</span>:intersecting>\n\t<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{/*...*/}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n&#x3C;/<span class=\"hljs-title hljs-class\">Observer</span>>\n</code></pre>\n<p>...but then it'd need an extra html element. Should it be a <code>div</code> or a <code>section</code>? Is it ok to just spread <code>...$$props</code> into it? Alternatively, I can do something like <a href=\"https://www.youtube.com/watch?v=R64MFbYpezU\">slot forwarding</a>, but now that's just a different kind of boilerplate.</p>\n<p>Feedback, thoughts, PRs are all welcomed.</p>"}]